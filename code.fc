(slice, (int, int, int, int)) ~load_prize(slice prize) {
  var fields = (prize~load_uint(8), prize~load_uint(64),        ;; prize_type, prize_flags
    prize~load_grams(), prize~load_uint(32)                     ;; fixed_part, fund_percentage_part
  );
  return (prize, fields);
}

(slice, (int, int, int, cell)) ~load_participant(slice participant) {
  var fields = (participant~load_uint(8),                       ;; participant_wc,
    participant~load_grams(),                                   ;; received_amount
    participant~load_uint(32),                                  ;; ticket_count
    participant~load_ref()                                      ;; participant_state
  );
  return (participant, fields);
}

;; Additional fields for lotteries (prizes probabilities and/or ticket counts)
(slice, (int, int, int, int, int, int, int)) ~load_random_prize(slice prize) {
  var fields = (prize~load_uint(8), prize~load_uint(64),            ;; prize_type, prize_flags
    prize~load_grams(), prize~load_uint(32),                        ;; fixed_part, fund_percentage_part
    prize~load_uint(32), prize~load_uint(32), prize~load_uint(32)   ;; per_prize_probability, ticket_count, per_ticket_probability
  );
  return (prize, fields);
}

() send_money(int wc, int addr, int amount) impure {
  send_raw_message(begin_cell()
    .store_uint(0xc4, 9)
    .store_uint(wc, 8)
    .store_uint(addr, 256)
    .store_grams(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(0, 32) ;; Simple money transfer
  .end_cell(), 3);
}

() lottery_raffle(cell prizes, cell entries, int prize_fund) impure {
  var prize_id = -1;
  var winnings = new_dict();
  do {
    (prize_id, var prize, var f) = prizes.udict_get_next?(32, prize_id);
    if (f) {
      var (
        prize_type, prize_flags, 
        fixed_part, fund_percentage_part, 
        per_prize_probability, ticket_count, per_ticket_probability
      ) = prize~load_random_prize();

      ;; Calculate actual prize size (some fixed part + predefined percentage of the total prize fund)
      var prize_amount = fixed_part + prize_fund * fund_percentage_part / 0xffffffff;
      
      ;; First, determine if this prize should be given at all (like a jackpot)
      if (rand(0xffffffff) <= per_prize_probability) {
        var tickets = new_dict();
        var entry_id = -1;
        var total_tickets = 0;
        do { ;; Make a copy of all ticket counts
          (entry_id, var entry, var f) = entries.udict_get_next?(256, entry_id);
          if (f) {
            var (entry_wc, entry_amount, entry_tickets, entry_state) = entry~load_participant();
            tickets~udict_set_builder(256, entry_id, begin_cell()
              .store_uint(entry_wc, 8).store_uint(entry_tickets, 32)
            );
            total_tickets += entry_tickets;
          }
        } until (~ f);

        ;; Repeatedly give out this prize (if there's enough tickets left)
        while (total_tickets & (ticket_count > 0)) {
          ;; Now check if this instance of this prize should be given out
          if (rand(0xffffffff) <= per_ticket_probability) {
            ;; Select a random ticket (without this prize yet) using roulette-wheel principle
            var current_index = 0;
            var target_index = rand(total_tickets);
            var entry_id = -1;
            do {
              (entry_id, var entry, var f) = tickets.udict_get_next?(256, entry_id);
              if (f) {
                var (entry_wc, entry_tickets) = (entry~load_uint(8), entry~load_uint(32));
                if ((target_index >= current_index) & (target_index < current_index + entry_tickets)) {
                  ;; If we're inside the winning sector of the roulette wheel, add this prize to this participant's balance
                  var (winning_entry, winning_found) = winnings.udict_get?(256, entry_id);
                  var winning_amount = prize_amount;
                  if (winning_found) {
                    winning_entry~skip_bits(8);
                    winning_amount += winning_entry~load_grams();
                  }
                  winnings~udict_set_builder(256, entry_id, begin_cell()
                    .store_uint(entry_wc, 8).store_grams(winning_amount)
                  );
                  tickets~udict_set_builder(256, entry_id, begin_cell()
                    .store_uint(entry_wc, 8).store_uint(entry_tickets - 1, 32)
                  );
                  f = false;
                } else {
                  current_index += entry_tickets;
                }
              }
            } until (~ f);
          }
          ticket_count = ticket_count - 1;
          total_tickets = total_tickets - 1;
        }
      }
    }
  } until (~ f);

  ;; Now actually send all stored winnings
  var entry_id = -1;
  do {
    (entry_id, var entry, var f) = winnings.udict_get_next?(256, entry_id);
    if (f) {
      var (entry_wc, winning_total) = (entry~load_uint(8), entry~load_grams());
      send_money(entry_wc, entry_id, winning_total);
    }
  } until (~ f);
}

() send_message_back(slice addr, ans_tag, query_id, body, extra, grams, mode) impure {
  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(addr)
    .store_grams(grams)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(ans_tag, 32)
    .store_uint(query_id, 64);
  if (body >= 0) {
    msg~store_uint(body, 32);
  }
  if (extra >= 0) {
    msg~store_uint(extra, 32);
  }
  send_raw_message(msg.end_cell(), mode);
}

(slice, (int, int, int, int, int, int, int, int, int, int, int, cell, cell, cell)) ~load_game_fields(slice game) {
  var fields = (game~load_uint(8), game~load_uint(64),          ;; game_type, game_flags
    game~load_uint(32), game~load_uint(32),                     ;; start_time, end_time
    game~load_uint(32), game~load_uint(32), game~load_uint(32), ;; min_tickets, max_tickets, cur_tickets
    game~load_grams(), game~load_grams(),                       ;; ticket_price, prize_fund
    game~load_uint(32), game~load_uint(32),                     ;; repeat_count, repeat_delay
    game~load_dict(), game~load_dict(), game~load_ref()         ;; prizes, participants, game_state
  );
  return (game, fields);
}

_ pack_state(int seqno, int owner_pubkey, int reserved_balance, cell games) inline_ref {
  return begin_cell()
    .store_uint(seqno, 32)
    .store_uint(owner_pubkey, 256)
    .store_grams(reserved_balance)
    .store_dict(games)
  .end_cell();
}

(int, int, int, cell) unpack_state() {
  var cs = get_data().begin_parse();
  var res = (cs~load_uint(32), cs~load_uint(256), cs~load_grams(), cs~load_dict());
  cs.end_parse();
  return res;
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
  var cs = in_msg_cell.begin_parse();
  var flags = cs~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  if (flags & 1) { ;; ignore bounced
    return ();
  }
  if (in_msg.slice_empty?()) {
    return ();
  }
  slice src_addr_slice = cs~load_msg_addr();
  var (src_wc, src_addr) = parse_std_addr(src_addr_slice);
  var op = in_msg~load_uint(32);
  if (op == 0) {
    return ();
  }

  var (stored_seqno, owner_pubkey, reserved_balance, games) = unpack_state();
  int query_id = in_msg~load_uint(64);
  if (op == 100) {
    ;; Join a game
    var (game_id, ticket_count) = (in_msg~load_uint(32), in_msg~load_uint(32));
    var (game, game_found) = games.udict_get?(32, game_id);
    ifnot (game_found) {
      return send_message_back(src_addr_slice, 0xfffffffe, query_id, op, 36, 0, 64);
    }

    var (
      game_type, game_flags, start_time, end_time,
      min_tickets, max_tickets, cur_tickets,
      ticket_price, prize_fund, repeat_count, repeat_delay,
      prizes, participants, game_state
    ) = game~load_game_fields();

    ifnot (start_time < now()) { ;; => game is not yet started
      return send_message_back(src_addr_slice, 0xfffffffe, query_id, op, 46, 0, 64);
    }
    ifnot (end_time > now()) { ;; => game is already finished
      return send_message_back(src_addr_slice, 0xfffffffe, query_id, op, 47, 0, 64);
    }
    if (cur_tickets + ticket_count > max_tickets) {
      ticket_count = max_tickets - cur_tickets;
    }
    if (ticket_count <= 0) { ;; => ticket count must be non-negative
      return send_message_back(src_addr_slice, 0xfffffffe, query_id, op, 48, 0, 64);
    }
    var actual_price = msg_value / ticket_count;
    if (actual_price < ticket_price) { ;; => attached value is not enough to buy tickets
      return send_message_back(src_addr_slice, 0xfffffffe, query_id, op, 49, 0, 64);
    }
    var (entry, entry_found) = participants.udict_get?(256, src_addr);
    var (entry_wc, entry_amount, entry_tickets, entry_state) = (src_wc, 0, 0, new_dict());
    if (entry_found) {
      (entry_wc, entry_amount, entry_tickets, entry_state) = entry~load_participant();
    }
    if (entry_wc != src_wc) {
      return send_message_back(src_addr_slice, 0xfffffffe, query_id, op, 41, 0, 64);
    }

    entry_amount = entry_amount + msg_value;
    entry_tickets = entry_tickets + ticket_count;
    prize_fund = prize_fund + msg_value;
    cur_tickets = cur_tickets + ticket_count;
    participants~udict_set_builder(256, src_addr, begin_cell()
      .store_uint(src_wc, 8)
      .store_grams(entry_amount)
      .store_uint(entry_tickets, 32)
      .store_ref(entry_state)
    );

    var is_game_over = (cur_tickets >= max_tickets) & (game_type < 64);
    if (is_game_over) {
      ;; Give out prizes if game is instant (no player moves required, i.e. lottery)
      if (game_type == 0) {
        lottery_raffle(prizes, participants, prize_fund);
      }
    }

    if (is_game_over & (repeat_count == 0)) {
      ;; Remove game from state
      games~udict_delete_get?(32, game_id);
    } else {
      if (is_game_over) {
        ;; Decrease repeat count and restart the game
        repeat_count = repeat_count - 1;
        var next_start_time = now() + repeat_delay;
        end_time = next_start_time + (end_time - start_time); ;; Keep duration the same
        start_time = next_start_time;
        ;; Reset the participants list
        participants = new_dict();
      }
      games~udict_set_builder(32, game_id, begin_cell()
        .store_uint(game_type, 8).store_uint(game_flags, 64)
        .store_uint(start_time, 32).store_uint(end_time, 32)
        .store_uint(min_tickets, 32).store_uint(max_tickets, 32).store_uint(cur_tickets, 32)
        .store_grams(ticket_price).store_grams(prize_fund)
        .store_uint(repeat_count, 32).store_uint(repeat_delay, 32)
        .store_dict(prizes).store_dict(participants));
    }

    set_data(pack_state(stored_seqno, owner_pubkey, reserved_balance, games));
    return ();
  }

  ifnot (op & (1 << 31)) {
    ;; unknown query, return error
    return send_message_back(src_addr_slice, 0xffffffff, query_id, op, 0, 0, 64);
  }
}

() recv_external(slice in_msg) impure {
  var signature = in_msg~load_bits(512);
  var cs = in_msg;
  var (msg_seqno, valid_until, op) = (cs~load_uint(32), cs~load_uint(32), cs~load_uint(32));
  throw_if(35, valid_until < now());

  var (stored_seqno, owner_pubkey, reserved_balance, games) = unpack_state();
  throw_unless(33, msg_seqno == stored_seqno);
  stored_seqno = stored_seqno + 1;

  if (op == 101) {
    ;; Update a game
    ;; TODO: implement a off-chain dealer logic
  } elseif (op == 102) {
    ;; Make a move in a game
    var current_pubkey = cs~load_uint(256);
    throw_unless(35, check_signature(slice_hash(in_msg), signature, current_pubkey));
    var (game_id, current_wc, current_addr, action) = (cs~load_uint(32), cs~load_uint(8), cs~load_uint(256), cs~load_uint(32));
    var (game, game_found) = games.udict_get?(32, game_id);
    throw_unless(36, game_found);

    var (
      game_type, game_flags, start_time, end_time,
      min_tickets, max_tickets, cur_tickets,
      ticket_price, prize_fund, repeat_count, repeat_delay,
      prizes, participants, game_state
    ) = game~load_game_fields();
    
    ;; TODO make a move
    if (game_type == 0) {
      ;; Ping a lottery game

    } elseif (game_type == 64) {
      ;; Blackjack: hit/stand

    }
  } else {
    throw_unless(34, check_signature(slice_hash(in_msg), signature, owner_pubkey));
    set_data(pack_state(stored_seqno, owner_pubkey, reserved_balance, games));
    commit();
    accept_message();

    if (op == 1) {
      var transfer_balance = 0;
      var (total_balance, other_currencies) = uncons(get_balance());

      ;; Withdraw money (just like from a regular wallet)
      cs~touch();
      while (~ cs.slice_empty?()) {
        var (wc, addr, amount) = (cs~load_uint(8), cs~load_uint(256), cs~load_grams());
        transfer_balance += amount;
        throw_if(43, reserved_balance >= total_balance - transfer_balance);
        send_money(wc, addr, amount);
      }
    } elseif (op == 2) {
      ;; Create new game
      var game_id = cs~load_uint(32);
      var game_data = cs~load_ref();
      var (game, game_found) = games.udict_get?(32, game_id);
      throw_if(44, game_found);
      games~udict_set(32, game_id, game_data.begin_parse());
    } elseif (op == 3) {
      ;; Cancel a game
      var game_id = cs~load_uint(32);
      var (game, game_found) = games.udict_get?(32, game_id);
      throw_unless(36, game_found);

      ;; Return all current bids
      var (
        game_type, game_flags, start_time, end_time,
        min_tickets, max_tickets, cur_tickets,
        ticket_price, prize_fund, repeat_count, repeat_delay,
        prizes, participants, game_state
      ) = game~load_game_fields();

      var player_addr = -1;
      do {
        (player_addr, var entry, var f) = participants.udict_get_next?(256, player_addr);
        if (f) {
          var wc = entry~load_uint(8);
          var received_amount = entry~load_grams();
          reserved_balance = reserved_balance - received_amount;
          send_money(wc, player_addr, received_amount);
        }
      } until (~ f);
      games~udict_delete_get?(32, game_id);
    }
  }
  set_data(pack_state(stored_seqno, owner_pubkey, reserved_balance, games));
}

;; Returns current sequence number

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}