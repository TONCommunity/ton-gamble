// automatically generated from `../src/crypto/smartcont/stdlib.fc` `code.fc` 
PROGRAM{
  DECLPROC ~store_game
  DECLPROC ~load_prize
  DECLPROC ~load_participant
  DECLPROC ~load_random_prize
  DECLPROC send_money
  DECLPROC lottery_raffle
  DECLPROC return_tickets
  DECLPROC send_message_back
  DECLPROC ~load_game_fields
  DECLPROC pack_state
  DECLPROC unpack_state
  DECLPROC recv_internal
  DECLPROC recv_external
  85143 DECLMETHOD seqno
  ~store_game PROC:<{
    s3 PUSH
    0 EQINT
    s14 s(-1) PUXC
    AND
    IF:<{
      12 BLKDROP
      2DROP
      SWAP
      32 PUSHINT
      DICTUDELGET
      NULLSWAPIFNOT
      2DROP
    }>ELSE<{
      s0 s13 XCHG
      IF:<{
        s3 POP
        s4 POP
        s10 POP
        s0 s9 XCHG
        DEC
        NOW
        s3 PUSH
        ADD
        s6 s7 XCHG2
        SUB
        s6 s(-1) PUXC
        ADD
        NEWDICT
        0 PUSHINT
        DUP
      }>ELSE<{
        s8 s5 s12 XCHG3
        s0 s1 s3 XCHG3
      }>
      NEWC
      s1 s12 XCHG
      8 STU
      s1 s10 XCHG
      64 STU
      s1 s8 XCHG
      32 STU
      32 STU
      s1 s4 XCHG
      32 STU
      s1 s2 XCHG
      32 STU
      s1 s5 XCHG
      32 STU
      SWAP
      STGRAMS
      s0 s4 XCHG2
      STGRAMS
      s1 s3 XCHG
      32 STU
      32 STU
      s1 s2 XCHG
      STDICT
      STDICT
      s0 s2 XCHG
      32 PUSHINT
      DICTUSETB
    }>
  }>
  ~load_prize PROC:<{
    8 LDU
    64 LDU
    LDGRAMS
    32 LDU
    4 -ROLL
  }>
  ~load_participant PROC:<{
    8 LDU
    256 LDU
    LDGRAMS
    32 LDU
    LDREF
    5 -ROLL
  }>
  ~load_random_prize PROC:<{
    8 LDU
    64 LDU
    LDGRAMS
    32 LDU
    32 LDU
    32 LDU
    32 LDU
    7 -ROLL
  }>
  send_money PROC:<{
    0 PUSHINT
    DUP
    196 PUSHINT
    NEWC
    9 STU
    s1 s5 XCHG
    8 STU
    s1 s3 XCHG
    256 STU
    SWAP
    STGRAMS
    s1 s2 XCHG
    107 STU
    32 STU
    ENDC
    3 PUSHINT
    SENDRAWMSG
  }>
  lottery_raffle PROC:<{
    -1 PUSHINT
    NEWDICT
    UNTIL:<{
      s1 s4 XCPU
      32 PUSHINT
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        ~load_random_prize CALLDICT
        s5 POP
        s5 POP
        s5 POP
        s8 s(-1) PUXC
        MUL
        32 PUSHPOW2DEC
        DIV
        ADD
        32 PUSHPOW2DEC
        RAND
        s0 s4 XCHG2
        LEQ
        IF:<{
          NEWDICT
          -1 PUSHINT
          0 PUSHINT
          UNTIL:<{
            s1 s10 XCPU
            8 PUSHPOW2
            DICTUGETNEXT
            NULLSWAPIFNOT
            NULLSWAPIFNOT
            DUP
            IF:<{
              s0 s2 XCHG
              ~load_participant CALLDICT
              DROP
              NIP
              s3 POP
              NEWC
              s1 s2 XCHG
              8 STU
              s2 s(-1) PUXC
              32 STU
              s0 s1 s6 XCHG3
              8 PUSHPOW2
              DICTUSETB
              s3 s4 XCHG2
              ADD
            }>ELSE<{
              2SWAP
              DROP
            }>
            SWAP
            NOT
          }>
          NIP
          WHILE:<{
            s3 PUSH
            0 GTINT
            s1 s(-1) PUXC
            AND
          }>DO<{
            32 PUSHPOW2DEC
            RAND
            s3 PUSH
            LEQ
            IF:<{
              0 PUSHINT
              OVER
              RAND
              -1 PUSHINT
              UNTIL:<{
                s4 PUSH
                8 PUSHPOW2
                DICTUGETNEXT
                NULLSWAPIFNOT
                NULLSWAPIFNOT
                DUP
                IF:<{
                  s0 s2 XCHG
                  8 LDU
                  32 LDU
                  DROP
                  s4 s5 PUSH2
                  GEQ
                  s6 s1 PUSH2
                  ADD
                  s6 s(-1) PUXC
                  LESS
                  AND
                  IF:<{
                    s3 POP
                    s1 s12 PUSH2
                    8 PUSHPOW2
                    DICTUGET
                    NULLSWAPIFNOT
                    s11 s(-1) PUXC
                    IF:<{
                      SWAP
                      8 PUSHINT
                      SDSKIPFIRST
                      LDGRAMS
                      DROP
                      ADD
                    }>ELSE<{
                      NIP
                    }>
                    OVER
                    NEWC
                    8 STU
                    SWAP
                    STGRAMS
                    SWAP
                    8 PUSHPOW2
                    s3 s14 s14 PUXC2
                    DICTUSETB
                    s0 s2 XCHG
                    DEC
                    NEWC
                    s1 s13 XCHG
                    8 STU
                    s1 s12 XCHG
                    32 STU
                    SWAP
                    8 PUSHPOW2
                    s12 s6 s6 PUXC2
                    DICTUSETB
                    FALSE
                  }>ELSE<{
                    NIP
                    s1 s4 XCHG
                    ADD
                    s3 s11 XCHG
                    s3 s5 XCHG
                    s3 s3 XCHG2
                  }>
                }>ELSE<{
                  s1 s12 XCHG
                  s6 s0 s6 XCHG3
                  DROP
                }>
                NOT
                s5 s11 XCHG
                s1 s5 XCHG
              }>
              3 BLKDROP
            }>
            s0 s3 XCHG
            DEC
            s0 s3 XCHG
            DEC
          }>
          5 BLKDROP
        }>ELSE<{
          3 BLKDROP
        }>
      }>ELSE<{
        s2 POP
      }>
      SWAP
      NOT
      s1 s2 XCHG
    }>
    s0 s4 XCHG
    4 BLKDROP
    -1 PUSHINT
    UNTIL:<{
      OVER
      8 PUSHPOW2
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        8 LDU
        LDGRAMS
        DROP
        s2 s(-1) PUXC
        send_money CALLDICT
      }>ELSE<{
        s2 POP
      }>
      SWAP
      NOT
    }>
    2DROP
  }>
  return_tickets PROC:<{
    -1 PUSHINT
    UNTIL:<{
      OVER
      8 PUSHPOW2
      DICTUGETNEXT
      NULLSWAPIFNOT
      NULLSWAPIFNOT
      DUP
      IF:<{
        s0 s2 XCHG
        8 LDU
        256 LDU
        LDGRAMS
        DROP
        send_money CALLDICT
      }>ELSE<{
        s2 POP
      }>
      SWAP
      NOT
    }>
    2DROP
  }>
  send_message_back PROC:<{
    0 PUSHINT
    24 PUSHINT
    NEWC
    6 STU
    s0 s8 XCHG2
    STSLICER
    ROT
    STGRAMS
    s1 s6 XCHG
    107 STU
    s1 s4 XCHG
    32 STU
    s1 s2 XCHG
    64 STU
    OVER
    -1 GTINT
    IF:<{
      32 STU
    }>ELSE<{
      NIP
    }>
    OVER
    -1 GTINT
    IF:<{
      32 STU
    }>ELSE<{
      NIP
    }>
    ENDC
    SWAP
    SENDRAWMSG
  }>
  ~load_game_fields PROC:<{
    8 LDU
    64 LDU
    32 LDU
    32 LDU
    32 LDU
    32 LDU
    32 LDU
    LDGRAMS
    LDGRAMS
    32 LDU
    32 LDU
    LDDICT
    LDDICT
    LDREF
    s0 s14 XCHG
    s0 s13 XCHG
    12 -ROLL
  }>
  pack_state PROCREF:<{
    NEWC
    s1 s4 XCHG
    32 STU
    s1 s2 XCHG
    256 STU
    SWAP
    STGRAMS
    STDICT
    ENDC
  }>
  unpack_state PROC:<{
    c4 PUSH
    CTOS
    32 LDU
    256 LDU
    LDGRAMS
    LDDICT
    ENDS
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    4 LDU
    SWAP
    1 PUSHINT
    AND
    IFJMP:<{
      3 BLKDROP
    }>
    OVER
    SEMPTY
    IFJMP:<{
      3 BLKDROP
    }>
    LDMSGADDR
    DROP
    DUP
    REWRITESTDADDR
    s0 s3 XCHG
    32 LDU
    OVER
    0 EQINT
    IFJMP:<{
      6 BLKDROP
    }>
    unpack_state CALLDICT
    s0 s4 XCHG
    64 LDU
    s6 PUSH
    100 EQINT
    IFJMP:<{
      32 LDU
      256 LDU
      32 LDU
      DROP
      s2 s7 PUSH2
      32 PUSHINT
      DICTUGET
      NULLSWAPIFNOT
      IFNOTJMP:<{
        s4 s8 XCHG
        8 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        36 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      ~load_game_fields CALLDICT
      DROP
      s13 POP
      s9 PUSH
      NOW
      LESS
      IFNOTJMP:<{
        12 BLKDROP
        s4 s8 XCHG
        8 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        46 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      s8 PUSH
      NOW
      GREATER
      IFNOTJMP:<{
        12 BLKDROP
        s4 s8 XCHG
        8 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        47 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      s5 s13 PUSH2
      ADD
      s7 PUSH
      GREATER
      IF:<{
        s13 POP
        s5 s4 PUSH2
        SUB
      }>ELSE<{
        s0 s13 XCHG
      }>
      DUP
      1 LESSINT
      IFJMP:<{
        12 BLKDROP
        s4 s8 XCHG
        8 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        48 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      25 s() PUSH
      OVER
      DIV
      s5 PUSH
      LESS
      IFJMP:<{
        12 BLKDROP
        s4 s8 XCHG
        8 BLKDROP
        s2 POP
        s3 POP
        s3 POP
        4294967294 PUSHINT
        49 PUSHINT
        0 PUSHINT
        s3 s5 XCHG
        s2 s4 XCHG
        64 PUSHINT
        send_message_back CALLDICT
      }>
      16 s() POP
      20 s() POP
      21 s() POP
      s11 s9 XCPU
      8 PUSHPOW2
      DICTUGET
      NULLSWAPIFNOT
      0 PUSHINT
      DUP
      NEWDICT
      s0 s3 XCHG
      IF:<{
        3 BLKDROP
        ~load_participant CALLDICT
        s3 POP
        s3 POP
        s3 POP
      }>ELSE<{
        s0 s0 s3 XCHG3
        DROP
      }>
      s0 s2 XCHG
      24 s() PUSH
      ADD
      s1 s15 XCPU
      ADD
      s1 s13 XCHG
      s0 24 s() XCHG
      ADD
      s3 s14 XCHG2
      ADD
      NEWC
      s1 20 s() XCHG
      8 STU
      21 s() PUSH
      SWAP
      256 STU
      s0 s11 XCHG2
      STGRAMS
      s1 21 s() XCHG
      32 STU
      s1 20 s() XCHG
      STREF
      s0 s2 XCHG
      s1 18 s() XCHG
      s0 s6 XCHG
      8 PUSHPOW2
      DICTUSETB
      s14 PUSH
      18 s() PUSH
      GEQ
      s4 PUSH
      64 LESSINT
      AND
      DUP
      IF:<{
        s4 PUSH
        0 EQINT
        IF:<{
          s6 s1 s9 PUSH3
          lottery_raffle CALLDICT
        }>
      }>
      s13 s15 XCHG
      s8 s14 XCHG
      s0 s13 XCHG
      s4 s12 XCHG
      s3 s11 XCHG
      s2 s10 XCHG
      s5 s9 XCHG
      s8 17 s() XCHG
      s7 18 s() XCHG
      s0 s6 XCHG
      s5 18 s() XCHG
      s4 18 s() XCHG
      s3 16 s() XCHG
      s2 17 s() XCHG
      SWAP
      ~store_game CALLDICT
      s1 s2 XCHG
      pack_state INLINECALLDICT
      c4 POP
    }>
    s1 s5 XCHG
    5 BLKDROP
    s2 POP
    s3 POP
    s3 POP
    OVER
    31 PUSHPOW2
    AND
    IFNOTJMP:<{
      32 PUSHPOW2DEC
      0 PUSHINT
      DUP
      s3 s5 XCHG
      s2 s4 XCHG
      64 PUSHINT
      send_message_back CALLDICT
    }>
    3 BLKDROP
  }>
  recv_external PROC:<{
    9 PUSHPOW2
    LDSLICEX
    DUP
    32 LDU
    32 LDU
    32 LDU
    NOW
    s1 s3 XCHG
    LESS
    35 THROWIF
    unpack_state CALLDICT
    s6 s3 XCPU
    EQUAL
    33 THROWIFNOT
    s0 s2 XCHG
    INC
    s3 PUSH
    101 EQINT
    IFNOT:<{
      s3 PUSH
      102 EQINT
      IF:<{
        s3 POP
        s0 s3 XCHG
        256 LDU
        s0 s6 XCHG
        HASHSU
        s0 s7 s7 XC2PU
        CHKSIGNU
        35 THROWIFNOT
        s1 s2 s0 PUSH3
        s6 PUSH
        pack_state INLINECALLDICT
        c4 POP
        COMMIT
        s0 s4 XCHG
        32 LDU
        DROP
        s0 s3 PUSH2
        32 PUSHINT
        DICTUGET
        NULLSWAPIFNOT
        36 THROWIFNOT
        ~load_game_fields CALLDICT
        DROP
        s13 POP
        s0 18 s() XCHG
        s12 PUSH
        8 PUSHPOW2
        DICTUGET
        NULLSWAPIFNOT
        NIP
        40 THROWIFNOT
        s10 PUSH
        0 EQINT
        IF:<{
          s7 PUSH
          NOW
          LESS
          38 THROWIFNOT
          ACCEPT
          s4 s6 PUSH2
          LESS
          IF:<{
            11 BLKDROP
            s6 POP
            s0 s5 XCHG
            return_tickets CALLDICT
            s4 s2 XCHG2
            32 PUSHINT
            DICTUDELGET
            NULLSWAPIFNOT
            2DROP
          }>ELSE<{
            17 s() PUSH
            s12 s3 PUSH2
            lottery_raffle CALLDICT
            s14 s15 XCHG
            s12 s13 XCHG
            TRUE
            s0 s13 XCHG
            s11 s12 XCHG
            s10 s11 XCHG
            s9 s10 XCHG
            s8 s9 XCHG
            s7 s8 XCHG
            s6 s7 XCHG
            s5 s6 XCHG
            s4 s5 XCHG
            s3 s4 XCHG
            s1 s3 s0 XCHG3
            s1 18 s() XCHG
            s0 18 s() XCHG
            ~store_game CALLDICT
            s1 s3 XCHG
          }>
        }>ELSE<{
          s10 s12 XCHG
          12 BLKDROP
          s5 POP
          s0 s4 XCHG
          64 EQINT
          DROP
          s3 s3 XCHG2
        }>
      }>ELSE<{
        s0 s6 XCHG
        HASHSU
        s0 s7 s7 XC2PU
        CHKSIGNU
        34 THROWIFNOT
        s4 s5 s0 PUSH3
        s6 PUSH
        pack_state INLINECALLDICT
        c4 POP
        COMMIT
        ACCEPT
        OVER
        1 EQINT
        IF:<{
          NIP
          0 PUSHINT
          BALANCE
          UNCONS
          DROP
          s0 s3 XCHG
          WHILE:<{
            DUP
            SEMPTY
            NOT
          }>DO<{
            8 LDU
            256 LDU
            LDGRAMS
            s4 s1 XCPU
            ADD
            s6 s0 PUSH2
            SUB
            s6 s(-1) PUXC
            GEQ
            43 THROWIF
            3 -ROLL
            send_money CALLDICT
            SWAP
          }>
          s2 s3 XCHG
          3 BLKDROP
        }>ELSE<{
          OVER
          2 EQINT
          IF:<{
            NIP
            SWAP
            32 LDU
            LDREF
            DROP
            s1 s3 PUSH2
            32 PUSHINT
            DICTUGET
            NULLSWAPIFNOT
            NIP
            44 THROWIF
            CTOS
            s0 s1 s3 XCHG3
            32 PUSHINT
            DICTUSET
          }>ELSE<{
            SWAP
            3 EQINT
            IF:<{
              SWAP
              32 LDU
              DROP
              s0 s2 PUSH2
              32 PUSHINT
              DICTUGET
              NULLSWAPIFNOT
              36 THROWIFNOT
              ~load_game_fields CALLDICT
              s1 s12 XCHG
              12 BLKDROP
              NIP
              NIP
              return_tickets CALLDICT
              ROT
              32 PUSHINT
              DICTUDELGET
              NULLSWAPIFNOT
              2DROP
            }>ELSE<{
              -ROT
              DROP
            }>
          }>
          SWAP
        }>
        -ROT
      }>
    }>ELSE<{
      s6 s7 s5 XCHG3
      s0 s4 XCHG
      4 BLKDROP
    }>
    s3 s3 s0 XCHG3
    pack_state INLINECALLDICT
    c4 POP
  }>
  seqno PROC:<{
    c4 PUSH
    CTOS
    32 PLDU
  }>
}END>c
